//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using FavMovies.HelperClasses;
using FavMovies.FactoryClasses;
using FavMovies.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace FavMovies.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Movieinfo'.<br/><br/></summary>
	[Serializable]
	public partial class MovieinfoEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private MovieEntity _movie;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static MovieinfoEntityStaticMetaData _staticMetaData = new MovieinfoEntityStaticMetaData();
		private static MovieinfoRelations _relationsFactory = new MovieinfoRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Movie</summary>
			public static readonly string Movie = "Movie";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class MovieinfoEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public MovieinfoEntityStaticMetaData()
			{
				SetEntityCoreInfo("MovieinfoEntity", InheritanceHierarchyType.None, false, (int)FavMovies.EntityType.MovieinfoEntity, typeof(MovieinfoEntity), typeof(MovieinfoEntityFactory), false);
				AddNavigatorMetaData<MovieinfoEntity, MovieEntity>("Movie", "Movieinfos", (a, b) => a._movie = b, a => a._movie, (a, b) => a.Movie = b, FavMovies.RelationClasses.StaticMovieinfoRelations.MovieEntityUsingMovieIdStatic, ()=>new MovieinfoRelations().MovieEntityUsingMovieId, null, new int[] { (int)MovieinfoFieldIndex.MovieId }, null, true, (int)FavMovies.EntityType.MovieEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static MovieinfoEntity()
		{
		}

		/// <summary> CTor</summary>
		public MovieinfoEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public MovieinfoEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this MovieinfoEntity</param>
		public MovieinfoEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Movieinfo which data should be fetched into this Movieinfo object</param>
		public MovieinfoEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Movieinfo which data should be fetched into this Movieinfo object</param>
		/// <param name="validator">The custom validator object for this MovieinfoEntity</param>
		public MovieinfoEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected MovieinfoEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Movie' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMovie() { return CreateRelationInfoForNavigator("Movie"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this MovieinfoEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static MovieinfoRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Movie' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMovie { get { return _staticMetaData.GetPrefetchPathElement("Movie", CommonEntityBase.CreateEntityCollection<MovieEntity>()); } }

		/// <summary>The Director property of the Entity Movieinfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "movieinfo"."director".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Director
		{
			get { return (System.String)GetValue((int)MovieinfoFieldIndex.Director, true); }
			set	{ SetValue((int)MovieinfoFieldIndex.Director, value); }
		}

		/// <summary>The Genre property of the Entity Movieinfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "movieinfo"."genre".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Genre
		{
			get { return (System.String)GetValue((int)MovieinfoFieldIndex.Genre, true); }
			set	{ SetValue((int)MovieinfoFieldIndex.Genre, value); }
		}

		/// <summary>The Id property of the Entity Movieinfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "movieinfo"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)MovieinfoFieldIndex.Id, true); }
			set { SetValue((int)MovieinfoFieldIndex.Id, value); }		}

		/// <summary>The MovieId property of the Entity Movieinfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "movieinfo"."movie_id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 MovieId
		{
			get { return (System.Int32)GetValue((int)MovieinfoFieldIndex.MovieId, true); }
			set	{ SetValue((int)MovieinfoFieldIndex.MovieId, value); }
		}

		/// <summary>Gets / sets related entity of type 'MovieEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual MovieEntity Movie
		{
			get { return _movie; }
			set { SetSingleRelatedEntityNavigator(value, "Movie"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace FavMovies
{
	public enum MovieinfoFieldIndex
	{
		///<summary>Director. </summary>
		Director,
		///<summary>Genre. </summary>
		Genre,
		///<summary>Id. </summary>
		Id,
		///<summary>MovieId. </summary>
		MovieId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace FavMovies.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Movieinfo. </summary>
	public partial class MovieinfoRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between MovieinfoEntity and MovieEntity over the m:1 relation they have, using the relation between the fields: Movieinfo.MovieId - Movie.Id</summary>
		public virtual IEntityRelation MovieEntityUsingMovieId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Movie", false, new[] { MovieFields.Id, MovieinfoFields.MovieId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticMovieinfoRelations
	{
		internal static readonly IEntityRelation MovieEntityUsingMovieIdStatic = new MovieinfoRelations().MovieEntityUsingMovieId;

		/// <summary>CTor</summary>
		static StaticMovieinfoRelations() { }
	}
}

//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using FavMovies.HelperClasses;
using FavMovies.FactoryClasses;
using FavMovies.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace FavMovies.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Movie'.<br/><br/></summary>
	[Serializable]
	public partial class MovieEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<MovieinfoEntity> _movieinfos;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static MovieEntityStaticMetaData _staticMetaData = new MovieEntityStaticMetaData();
		private static MovieRelations _relationsFactory = new MovieRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Movieinfos</summary>
			public static readonly string Movieinfos = "Movieinfos";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class MovieEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public MovieEntityStaticMetaData()
			{
				SetEntityCoreInfo("MovieEntity", InheritanceHierarchyType.None, false, (int)FavMovies.EntityType.MovieEntity, typeof(MovieEntity), typeof(MovieEntityFactory), false);
				AddNavigatorMetaData<MovieEntity, EntityCollection<MovieinfoEntity>>("Movieinfos", a => a._movieinfos, (a, b) => a._movieinfos = b, a => a.Movieinfos, () => new MovieRelations().MovieinfoEntityUsingMovieId, typeof(MovieinfoEntity), (int)FavMovies.EntityType.MovieinfoEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static MovieEntity()
		{
		}

		/// <summary> CTor</summary>
		public MovieEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public MovieEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this MovieEntity</param>
		public MovieEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Movie which data should be fetched into this Movie object</param>
		public MovieEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Movie which data should be fetched into this Movie object</param>
		/// <param name="validator">The custom validator object for this MovieEntity</param>
		public MovieEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected MovieEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Movieinfo' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMovieinfos() { return CreateRelationInfoForNavigator("Movieinfos"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this MovieEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static MovieRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Movieinfo' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMovieinfos { get { return _staticMetaData.GetPrefetchPathElement("Movieinfos", CommonEntityBase.CreateEntityCollection<MovieinfoEntity>()); } }

		/// <summary>The Id property of the Entity Movie<br/><br/></summary>
		/// <remarks>Mapped on  table field: "movie"."id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)MovieFieldIndex.Id, true); }
			set { SetValue((int)MovieFieldIndex.Id, value); }		}

		/// <summary>The MovieName property of the Entity Movie<br/><br/></summary>
		/// <remarks>Mapped on  table field: "movie"."movie_name".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String MovieName
		{
			get { return (System.String)GetValue((int)MovieFieldIndex.MovieName, true); }
			set	{ SetValue((int)MovieFieldIndex.MovieName, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'MovieinfoEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(MovieinfoEntity))]
		public virtual EntityCollection<MovieinfoEntity> Movieinfos { get { return GetOrCreateEntityCollection<MovieinfoEntity, MovieinfoEntityFactory>("Movie", true, false, ref _movieinfos); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace FavMovies
{
	public enum MovieFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>MovieName. </summary>
		MovieName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace FavMovies.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Movie. </summary>
	public partial class MovieRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between MovieEntity and MovieinfoEntity over the 1:n relation they have, using the relation between the fields: Movie.Id - Movieinfo.MovieId</summary>
		public virtual IEntityRelation MovieinfoEntityUsingMovieId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Movieinfos", true, new[] { MovieFields.Id, MovieinfoFields.MovieId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticMovieRelations
	{
		internal static readonly IEntityRelation MovieinfoEntityUsingMovieIdStatic = new MovieRelations().MovieinfoEntityUsingMovieId;

		/// <summary>CTor</summary>
		static StaticMovieRelations() { }
	}
}
